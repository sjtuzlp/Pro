

//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

#include "pch.h"
#include "App.xaml.h"

using namespace Platform;
using namespace Windows::Foundation;
using namespace Windows::UI::Xaml;
using namespace Windows::UI::Xaml::Markup;
using namespace PDFReader;
using namespace XamlTypeInfo::InfoProvider;

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BREAK_ON_UNHANDLED_EXCEPTION
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#if defined(_M_IX86) && !defined(_VSDESIGNER_DONT_LOAD_AS_DLL)
#pragma comment(linker, "/EXPORT:DllGetActivationFactory=_DllGetActivationFactory@8,PRIVATE")
#pragma comment(linker, "/EXPORT:DllCanUnloadNow=_DllCanUnloadNow@0,PRIVATE")
#pragma comment(linker, "/EXPORT:VSDesignerDllMain=_VSDesignerDllMain@12,PRIVATE")
#pragma comment(linker, "/INCLUDE:___refMTAThread")

extern int __abi___threading_model;

extern "C"
{
    int __stdcall _DllMainCRTStartup(void* hinstDLL, unsigned long fdwReason, void** lpvReserved);

    int __stdcall VSDesignerDllMain(void* hinstDLL, unsigned long fdwReason, void** lpvReserved)
    {
        __abi___threading_model = 0;
        return _DllMainCRTStartup(hinstDLL, fdwReason, lpvReserved);
    }
}

#endif // defined(_M_IX86) && !defined(_VSDESIGNER_DONT_LOAD_AS_DLL)

void App::InitializeComponent()
{
#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BREAK_ON_UNHANDLED_EXCEPTION
    UnhandledException += ref new UnhandledExceptionEventHandler(
        [](Object^ sender, UnhandledExceptionEventArgs^ eventArg)
        {
            (void)sender; // Unused parameter
            if (IsDebuggerPresent())
            {
                String^ errorMessage = eventArg->Message;
                __debugbreak();
            }
        });
#endif
}

IXamlType^ App::GetXamlType(Interop::TypeName typeName)
{
    if(_provider == nullptr)
    {
        _provider = ref new XamlTypeInfoProvider();
    }
    return _provider->GetXamlTypeByType(typeName);
}

IXamlType^ App::GetXamlType(String^ typeName)
{
    if(_provider == nullptr)
    {
        _provider = ref new XamlTypeInfoProvider();
    }
    return _provider->GetXamlTypeByName(typeName);
}

Array<XmlnsDefinition>^ App::GetXmlnsDefinitions()
{
    return ref new Array<XmlnsDefinition>(0);
}

#ifndef DISABLE_XAML_GENERATED_MAIN
int main(Array<String^>^ args)
{
    (void)args; // Unused parameter
    Application::Start(ref new ApplicationInitializationCallback(
        [](ApplicationInitializationCallbackParams^ params) {
            (void)params; // Unused parameter
            auto app = ref new App();
        }));
}
#endif

void App::Connect(int connectionId, Platform::Object^ target)
{
    (void)connectionId; // Unused parameter
    (void)target; // Unused parameter
    _contentLoaded = true;
}

