//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include <regex>
#include "XamlTypeInfo.g.h"

using namespace Platform;
using namespace Platform::Collections;
using namespace Windows::UI::Xaml;
using namespace Windows::UI::Xaml::Markup;
using namespace Windows::Foundation;

namespace XamlTypeInfo
{
    namespace InfoProvider
    {
        // XamlTypeInfoProvider
        IXamlType^ XamlTypeInfoProvider::GetXamlTypeByType(Windows::UI::Xaml::Interop::TypeName t)
        {
            auto xamlType = GetXamlTypeByName(t.Name);

            if (xamlType == nullptr)
            {
                xamlType = CheckOtherMetadataProvidersForType(t);
            }
            return xamlType;
        }

        IXamlType^ XamlTypeInfoProvider::GetXamlTypeByName(String^ typeName)
        {
            if (typeName == nullptr || typeName->IsEmpty())
            {
                return nullptr;
            }

            auto val = _xamlTypes.find(typeName);
            IXamlType^ xamlType = nullptr;
            if (val != _xamlTypes.end())
            {
                xamlType = (val->second).Resolve<IXamlType>();
                if(xamlType != nullptr)
                {
                    return xamlType;
                }
            }

            xamlType = CreateXamlType(typeName);

            if (xamlType == nullptr)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }

            if (xamlType != nullptr)
            {
                Platform::WeakReference wr(xamlType);
                _xamlTypes[typeName] =  wr;
            }
            return xamlType;
        }

        IXamlMember^ XamlTypeInfoProvider::GetMemberByLongName(String^ longMemberName)
        {
            if (longMemberName == nullptr || longMemberName->IsEmpty())
            {
                return nullptr;
            }

            auto val = _xamlMembers.find(longMemberName);
            if (val != _xamlMembers.end())
            {
                return val->second;
            }

            auto xamlMember = CreateXamlMember(longMemberName);

            if (xamlMember != nullptr)
            {
                _xamlMembers[longMemberName] = xamlMember;
            }
            return xamlMember;
        }

        // XamlSystemBaseType
        XamlSystemBaseType::XamlSystemBaseType(String^ name) :
            _fullName(name)
        {
        }

        IXamlType^ XamlSystemBaseType::BaseType::get()
        {
            throw ref new NotImplementedException;
        }

        IXamlMember^ XamlSystemBaseType::ContentProperty::get()
        {
            throw ref new NotImplementedException;
        }

        String^ XamlSystemBaseType::FullName::get()
        {
            return _fullName;
        }

        String^ XamlSystemBaseType::Name::get()
        {
            const wchar_t* seperator = wcsrchr(_fullName->Data(), '.');
            if (seperator == nullptr)
            {
                return _fullName;
            }
            return ref new String(seperator);
        }

        bool XamlSystemBaseType::IsArray::get()
        {
            throw ref new NotImplementedException;
        }

        bool XamlSystemBaseType::IsCollection::get()
        {
            throw ref new NotImplementedException;
        }

        bool XamlSystemBaseType::IsConstructible::get()
        {
            throw ref new NotImplementedException;
        }

        bool XamlSystemBaseType::IsDictionary::get()
        {
            throw ref new NotImplementedException;
        }

        bool XamlSystemBaseType::IsMarkupExtension::get()
        {
            throw ref new NotImplementedException;
        }

        bool XamlSystemBaseType::IsEnum::get()
        {
            throw ref new NotImplementedException;
        }

        bool XamlSystemBaseType::IsSystemType::get()
        {
            throw ref new NotImplementedException;
        }

        bool XamlSystemBaseType::IsBindable::get()
        {
            throw ref new NotImplementedException;
        }

        IXamlType^ XamlSystemBaseType::ItemType::get()
        {
            throw ref new NotImplementedException;
        }

        IXamlType^ XamlSystemBaseType::KeyType::get()
        {
            throw ref new NotImplementedException;
        }

        Interop::TypeName XamlSystemBaseType::UnderlyingType::get()
        {
            Interop::TypeName typeName;

            typeName.Name = _fullName;
            typeName.Kind = Interop::TypeKind::Primitive;

            return typeName;
        }

        Object^ XamlSystemBaseType::ActivateInstance()
        {
            throw ref new NotImplementedException;
        }

        IXamlMember^ XamlSystemBaseType::GetMember(String^)
        {
            throw ref new NotImplementedException;
        }

        void XamlSystemBaseType::AddToVector(Object^, Object^)
        {
            throw ref new NotImplementedException;
        }

        void XamlSystemBaseType::AddToMap(Object^, Object^, Object^)
        {
            throw ref new NotImplementedException;
        }

        void XamlSystemBaseType::RunInitializer()
        {
            throw ref new NotImplementedException;
        }

        Object^ XamlSystemBaseType::CreateFromString(String^)
        {
            throw ref new NotImplementedException;
        }

        //XamlUserType
        XamlUserType::XamlUserType(XamlTypeInfoProvider^ provider, String^ fullName, IXamlType^ baseType) :
            _isArray(false),
            _isMarkupExtension(false),
            _isEnum(false),
            _isBindable(false),
            _fullName(fullName),
            _provider(provider),
            _baseType(baseType)
        {
        }

        String^ XamlUserType::FullName::get()
        {
            return _fullName;
        }

        String^ XamlUserType::Name::get()
        {
            const wchar_t *seperator = wcsrchr(_fullName->Data(), '.');
            if (seperator == nullptr)
            {
                return _fullName;
            }
            return ref new String(seperator);
        }

        Interop::TypeName XamlUserType::UnderlyingType::get()
        {
            Interop::TypeName typeName;

            typeName.Name = _fullName;
            typeName.Kind = KindOfType;

            return typeName;
        }

        bool XamlUserType::IsSystemType::get()
        {
            return true;
        }

        IXamlType^ XamlUserType::BaseType::get()
        {
            return _baseType;
        }

        bool XamlUserType::IsArray::get()
        {
            return _isArray;
        }

        bool XamlUserType::IsCollection::get()
        {
            return CollectionAdd != nullptr;
        }

        bool XamlUserType::IsConstructible::get()
        {
            return Activator != nullptr;
        }

        bool XamlUserType::IsDictionary::get()
        {
            return DictionaryAdd != nullptr;
        }

        bool XamlUserType::IsMarkupExtension::get()
        {
            return _isMarkupExtension;
        }

        bool XamlUserType::IsEnum::get()
        {
            return _isEnum;
        }

        bool XamlUserType::IsBindable::get()
        {
            return _isBindable;
        }

        IXamlMember^ XamlUserType::ContentProperty::get()
        {
            return _provider->GetMemberByLongName(_contentPropertyName);
        }

        IXamlType^ XamlUserType::ItemType::get()
        {
            return _provider->GetXamlTypeByName(_itemTypeName);
        }

        IXamlType^ XamlUserType::KeyType::get()
        {
            return _provider->GetXamlTypeByName(_keyTypeName);
        }

        IXamlMember^ XamlUserType::GetMember(String^ name)
        {
            auto val = _memberNames.find(name);
            if (val != _memberNames.end())
            {
                return _provider->GetMemberByLongName(val->second);
            }
            return nullptr;
        }

        Object^ XamlUserType::ActivateInstance()
        {
            return Activator();
        }

        void XamlUserType::AddToMap(Object^ instance, Object^ key, Object^ item)
        {
            DictionaryAdd(instance, key, item);
        }

        void XamlUserType::AddToVector(Object^ instance, Object^ item)
        {
            CollectionAdd(instance, item);
        }

        void XamlUserType::RunInitializer()
        {
            // The C++ runtime will have already run all the Static Initializers at start up.
        }

        Object^ XamlUserType::CreateFromString(String^ input)
        {
            return FromStringConverter(this, input);
        }

        void XamlUserType::SetContentPropertyName(String^ contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        void XamlUserType::SetIsArray()
        {
            _isArray = true;
        }

        void XamlUserType::SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        void XamlUserType::SetIsEnum()
        {
            _isEnum = true;
        }

        void XamlUserType::SetIsBindable()
        {
            _isBindable = true;
        }

        void XamlUserType::SetItemTypeName(String^ itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        void XamlUserType::SetKeyTypeName(String^ keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        void XamlUserType::AddMemberName(String^ shortName)
        {
            _memberNames[shortName] = FullName + "." + shortName;
        }

        void XamlUserType::AddEnumValue(String^ name, Object^ value)
        {
            _enumValues[name->Data()] = value;
        }

        uint32 XamlUserType::CreateEnumUIntFromString(String^ input)
        {
            bool found = false;

            const std::wregex regularExpression(L"^\\s+|\\s*,\\s*|\\s+$");
            uint32 val = 0;

            for (std::wcregex_token_iterator it(input->Begin(), input->End(), regularExpression, -1), end; it != end; ++it)
            {
                const std::wcsub_match& subMatch = *it;

                if (subMatch.length() == 0 )
                {
                    continue;
                }

                std::wstring lookup(subMatch.first, (unsigned int)subMatch.length());

                try
                {
                    auto entry = _enumValues.find(lookup);
                    if (entry != _enumValues.end())
                    {
                        const auto f = entry->second;
                        val |= safe_cast<int>(f);
                    }
                    else
                    {
                        val |= std::stoi(subMatch);
                    }
                    found=true;
                }
                catch (const std::invalid_argument& )
                {
                    found = false;
                    break;
                }
            }

            if(found)
            {
                return val;
            }
            throw ref new InvalidArgumentException();
        }

        // XamlMember
        XamlMember::XamlMember(XamlTypeInfoProvider^ provider, String^ name, String^ typeName) :
            _isAttachable(false),
            _isDependencyProperty(false),
            _isReadOnly(false),
            _name(name),
            _typeName(typeName),
            _provider(provider)
        {
        }

        void XamlMember::SetIsAttachable()
        {
            _isAttachable = true;
        }

        bool XamlMember::IsAttachable::get()
        {
            return _isAttachable;
        }

        void XamlMember::SetIsDependencyProperty()
        {
            _isDependencyProperty = true;
        }

        bool XamlMember::IsDependencyProperty::get()
        {
            return _isDependencyProperty;
        }

        void XamlMember::SetIsReadOnly()
        {
            _isReadOnly = true;
        }

        bool XamlMember::IsReadOnly::get()
        {
            return _isReadOnly;
        }

        String^ XamlMember::Name::get()
        {
            return _name;
        }

        IXamlType^ XamlMember::Type::get()
        {
            return _provider->GetXamlTypeByName(_typeName);
        }

        void XamlMember::SetTargetTypeName(String^ targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }

        IXamlType^ XamlMember::TargetType::get()
        {
            return _provider->GetXamlTypeByName(_targetTypeName);
        }

        Object^ XamlMember::GetValue(Object^ instance)
        {
            if (Getter != nullptr)
            {
                return Getter(instance);
            }
            throw ref new NullReferenceException();
        }

        void XamlMember::SetValue(Object^ instance, Object^ value)
        {
            if (Setter != nullptr)
            {
                Setter(instance, value);
                return;
            }
            throw ref new NullReferenceException();
        }
    }
}


